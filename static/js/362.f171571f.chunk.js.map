{"version":3,"file":"static/js/362.f171571f.chunk.js","mappings":"uOACA,GAAgB,UAAY,6BAA6B,WAAa,8BAA8B,UAAY,6BAA6B,OAAS,2B,6BCIzIA,EAAY,WACvB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAClBE,GAAWC,EAAAA,EAAAA,MAkBjB,OACE,gBAAKC,UAAWC,EAAAA,sBAAhB,UACE,kBAAMC,SAlBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAQF,EAAKG,SAASD,MAAME,MAC5BC,EAAWL,EAAKG,SAASE,SAASD,MAExCX,GACEa,EAAAA,EAAAA,IAAe,CACbJ,MAAAA,EACAG,SAAAA,KAIJL,EAAKO,OACN,EAIiCZ,UAAWC,EAAAA,UAAzC,WACE,kBAAOY,QAASlB,EAAcK,UAAWC,EAAAA,UAAzC,SAAwD,WAGxD,kBACEa,KAAK,QACLC,KAAK,QACLf,UAAWC,EAAAA,WACXe,MAAM,iCACNC,GAAItB,EACJuB,UAAQ,KAGV,kBAAOL,QAAShB,EAAiBG,UAAWC,EAAAA,UAA5C,SAA2D,cAG3D,kBACEa,KAAK,OACLC,KAAK,WACLf,UAAWC,EAAAA,WACXe,MAAM,iCACNC,GAAIpB,EACJqB,UAAQ,KAGV,mBAAQJ,KAAK,SAASd,UAAWC,EAAAA,OAAjC,SAA6C,gBAMpD,EC1DD,EAAiC,kC,oBCKpBkB,EAAY,WAGvB,OAFwBC,EAAAA,EAAAA,IAAYC,EAAAA,KAER,SAAC,KAAD,CAAUC,GAAG,eAGvC,iBAAKtB,UAAWC,EAAhB,WACE,wBAAI,WACJ,SAACP,EAAD,MAGL,EAED,G,wDClBO,IAkBIE,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://goit-react-hw-08-phonebook/./src/Pages/Login/LoginPage.module.css?e0de","Pages/Login/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"LoginForm_formstyle__+VlmY\",\"inputstyle\":\"LoginForm_inputstyle__-f0eg\",\"inputname\":\"LoginForm_inputname__FGgXS\",\"button\":\"LoginForm_button__LodJg\"};","import { useDispatch } from 'react-redux';\nimport css from './LoginForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { loginUserThunk } from 'redux/operations';\n\nexport const LoginForm = () => {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const email = form.elements.email.value;\n    const password = form.elements.password.value;\n\n    dispatch(\n      loginUserThunk({\n        email,\n        password,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <div className={css.registerFormContainer}>\n      <form onSubmit={handleSubmit} className={css.formstyle}>\n        <label htmlFor={emailInputId} className={css.inputname}>\n          Email\n        </label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          className={css.inputstyle}\n          title=\"Valid email should be provided\"\n          id={emailInputId}\n          required\n        />\n\n        <label htmlFor={passwordInputId} className={css.inputname}>\n          Password\n        </label>\n        <input\n          type=\"text\"\n          name=\"password\"\n          className={css.inputstyle}\n          title=\"Valid email should be provided\"\n          id={passwordInputId}\n          required\n        />\n\n        <button type=\"submit\" className={css.button}>\n          Log In!\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"LoginPage_loginContainer__tn53j\"};","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport css from './LoginPage.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport { Navigate } from 'react-router-dom';\n\nexport const LoginPage = () => {\n  const authintificated = useSelector(selectAuthentificated);\n\n  if (authintificated) return <Navigate to=\"/contacts\" />;\n\n  return (\n    <div className={css.loginContainer}>\n      <h2>Login</h2>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","emailInputId","nanoid","passwordInputId","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","form","currentTarget","email","elements","value","password","loginUserThunk","reset","htmlFor","type","name","title","id","required","LoginPage","useSelector","selectAuthentificated","to","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}